=========================
型
=========================

プログラミング言語では、全ての式は型付けされている。

これが今回勉強するすべてであるが、型(type)は、プログラミング言語の発展ともに進化してきた理論と技法である。今日、ソフトウェア信頼性やソフトウェアのセキュリティセキュリティなどの重要な基盤となっている。

ここでは、まず型とは何か学んでみよう。

値と種類
======

前回は、簡単な数式を試してみた。その中でいくつか変わったことに気づいたかもしれない。

例えば、7/3 を評価したとき、3.5 にならなく、3 となる。

::
	
	>>>
	7/3
	
	<<<
	2

これは評価の間違いではなく、プログラミング言語内において、自然数 と 小数点数が区別されているためである。ちなみに、自然数のことを整数、小数点数のことを浮動小数点数と呼ぶ。

型は、このような値の種類を区別するために使われる。

まず最初に覚える型は次のとおりである。

* boolean       論理値を表す型
* int      整数値を表す型
* double    倍精度の浮動小数点数を表す型
* String     文字列

プログラミング言語によって、サポートしている型の種類は異なる。
また名前も多少異なる。しかし、これらの型の概念は一般的であり、ほとんど全ての言語で普遍的にあらわれるものである。

整数
========

整数は、コンピュータ上で表現される値の中でもっとも基本的な値である。
コンピュータ内の2進数の表現と対応しており、8ビット,16ビット, 32ビット, 64ビットと処理の単位にあわせて大きさがある。

* byte - 8ビット整数
* short - 16ビット整数
* int - 32ビット整数
* long - 64ビット整数

32ビット整数は、2^32 までの数値を表現できる。10進数なら、0 〜 4294967295に相当する。ただし、2の補数表現で符号を表現するため、通常は-2147483648 から +2147483647の範囲である。

32ビット整数は、日常レベルで十分に大きな値を扱うことができるが、より大きな数値を扱うことができない。範囲を超えてしまうとどうなるか？

::
	
	>>>
	2147483647+1
	
	<<<
	-2147483648

このように負の数に反転してしまう。整数オーバフローと呼ぶ。これはプログラミング言語の標準的な動作であり、反転しないように注意するのはプログラマの責任となっている。

より大きな整数を扱いときは、64ビット長の long を使う。ただしこちらも限界がある。ソフトウェアで工夫すれば、無限長の整数を表現することができる。

整数と演算子
========

整数は、四則演算、ビット演算、比較演算を行うことができる。ビット演算とは、ビット単位のデータ操作を行う演算子であり、マルチメディア処理等でよく利用される。

* 加算 x + y
* 減算 x - y
* 乗算 x * y
* 除算 x / y
* 余算 x % y

* AND x & y
* OR x | y
* XOR x ^ y
* 左シフト x << y
* 右シフト x >> y
* 補数 ~x

これらの演算子は、x と y に整数で型付けされた式をとり、評価すれば整数値となる。評価すると、整数になる式は整数型で型付けされているという。

比較演算子は、整数の大小を評価するときに使う。

* x == y  -- 等しい
* x != y  -- 等しくない
* x < y -- より小さい
* x > y -- より大きい
* x <= y -- 以下
* x >= y -- 以上

等価(==)と代入(=)はよく似ているが、一文字違えば別の演算子である。（間違えないように）

比較演算子は、その評価値がより興味深い。四則演算やビット演算と異なり、評価値は整数ではない。論理値と呼ばれる、真(true)、偽(false) を表す2値である。

::
	
	>>>
	1 < 2
	
	<<<
	true

論理値は、プログラミングにおいて条件を書くときに重要な値である。

論理値
=======

論理値は、真(true)、偽(false) を表す2値である。boolean 型で型付けされている。

次のようなリテラルで表現される。

::
	
	true
	false

プログラミング言語によっては、boolean 型が存在しない言語もある。代わりに、整数値の1 と 0 で代用することがある。しかし、概念として論理値をもたない言語は存在しない。

論理式は、boolean 型で型付けされた式、つまり評価すると論理値がえられる式である。

論理演算子は、論理式 x, y に対して、次のように定義されている。論理演算で構成される式もboolean 型で型付けされており、論理式である。

* x && y  -- x かつ y
* x || y  -- x または y
* !x  -- x でない

(演習) 変数 x が奇数かどうか判定する式を書いてみよう

条件演算は、別名三項演算子ともよばれ、論理式といっしょに用いるとより複雑な式が構成できる。

＜論理式＞ ?  <式1> : <式2>

<論理式>が真(true)のとき、<式1>が評価され、そうでなければ<式2>が評価される。たとえば、x > y ? x : y は、x と y のうち大きな数値がえられる。

浮動小数点数
=========

浮動小数点数は、IEEE754規格にもとづく、コンピュータ内の小数点数の表現である。多くのプログラミング言語において、次の2種類の型が用意されている。

* float 型 - 単精度浮動小数点数
* double 型 - 倍精度浮動小数点数
 
float 型は、実用上、十分な精度が得られないことも多いため、double 型が一般的に利用される。通常はdouble 型を使うのがよい。

浮動小数点数は、整数と区別するため、明示的に0.0 のように小数点以下記述する。もしくは、e もしくは E を含めることで指数表現することもできる。

::
	
	3.14
	314e-2
 
 浮動小数点数は、整数とおなじく、四則演算と比較演算を使うことができる。ビット操作演算は用意されていない。

::
	
	>>>
	7.0 / 2.0
	
	<<<
	3.50
 
 浮動小数小数点数は、いわゆる実数とは異なる。特に、丸め誤差などの注意が必要である。
 
 型強制
 ========
 
 プログラミング言語では、整数と浮動小数点数、論理値をそれぞれ異なる型で区別していることを理解したと思う。もし両者を混在して利用したらどうなるのだろうか？

::
	
	>>>
	1 + true
	
	(型エラー)

例えば、整数値と論理値を加算すると、そのような演算は存在しない。コンピュータはどのように評価していいかわからない。このような状況を「型エラー」と呼ぶ。
 
::
	
	>>>
	1 + 2.0
	<<<
	3.0
	
一方、int 型と double 型の加算は、仮に型が異なっても評価してくれた方が直感的である。このような場合は、プログラミング言語は賢く、より精度の高い型に変換してくれる。上の場合は、int 型の数値は、double 型に変換されてから、評価される。このような自動変換を型強制と呼ぶ。

なお、自動変換ではなく、ユーザが明示的に型変換を行いたい場合は、次のようにキャスト演算子を用いる。

::
	
	>>>
	(double)1
	<<<
	1.0

変換できない場合は、キャストできないから注意しよう。

	>>>
	(boolean)1
	<<<
	

変数と型
=======

プログラミングの世界では、変数に型付けすべきかしないべきか、長らく大きな論争となってきた。

変数に型付けすべきという流派は「静的型付け派」という。変数に型付けすべきでないという流派は「動的型付け派」という。

前回、変数を使ったときは、変数に型付けされていなかった。

::
	
  x = 0

つまり、変数 x にはどのような型の値でも代入可能である。一方、今回、紹介するのは、変数に型付けする方法である。

変数に型付けすることを変数宣言という。次のように 型、変数名、そして初期値のように書く。

::
	
	int x = 0;
	
これで変数 x は、int 型で型付けされた。つまり、int 型の値しか代入することはできない。

::
	
	>>>
	x = true
	(<stdio>:2) [error] 型エラー: int型が必要ですが、boolean型が与えられました.

このように型付けすることで、他の型が代入できなくなる。より誤プログラミングが減る。一方、常に型を意識して書く必要があり、プログラミングには手間が増える。

静的型付けは、C/C++言語, Java言語, C#言語など主流プログラミング言語で採用されている。一方、動的型付けは、JavaScript, Ruby, Python, PHP など、スクリプト言語とよばれる書きやすさ重視する言語で愛用されている。

ちなみに、Konoha は、教育プログラミング言語なので、両者を体験できるように、静的型付けも動的型付けも両方とも採用している。ちゃんと型を使い分けて、静的型付けをしっかり覚えて欲しい。

もし型付けが難しい場合は、次のように var を先頭に付けて変数宣言と初期化をするようにして欲しい。

::
	
	>>>
	var n = 1;
	(<stdio>:1) [warning] n はint型です
 
 Konoha は、簡単な型推論システムを備えている。型推論とは、ユーザが型を明示的に宣言しなくても変数 n の型を推論してくれる機能である。

文字列
======

今回は、整数、論理値、浮動小数点数とみてきた。最後に文字と文字列をみておこう。ほとんどの情報は文字で表現されているため、文字と文字列を使いこなすと、プログラミングの範囲が大きくなる。

* char 型 - 文字を表す型
* String 型 - 文字列を表す型

文字は1文字の文字列であるため、ほとんどの場合は文字列で足りる。文字列は、ダブルクオートで囲んで表現する。

::

	"hello,world"
	"abc"
	"あいうえお"

