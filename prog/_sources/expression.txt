=========================
初めの一歩
=========================

まずは、Konohaを使いながらプログラムの最小単位である「式」をみていこう。

式と評価
=====

プログラミングでは、実行して結果の得られるプログラムのことを**式(expression)**と呼ぶ。式は、プログラムの最小単位となる。たとえば、あとから述べるとおり、次のようなおなじみの数式も式の一種である。

::
	
	1+2

さて、プログラムは実行するものである。
式を実行して式の計算結果を得ること**「評価する」**という。

Konohaでは、入力プロンプトに対し式を入力すると
::
	
  >>>
  1+2

次のように評価され、値が得られる。

::
	
  <<<
  3

このように式を入力して、直ぐに評価できる環境を「対話的プログラミング環境」と呼ぶ。
  
数式
====

プログラミング言語は、もともと数学の記法を可能なかぎり用いてプログラミングすることを目指して設計されてきた歴史がある。そのため、多くの記法が数学に由来している。

ただし、初期のコンピュータ・システムは表現可能な文字が限られていたため、✕や÷などの記号は使えなかった。そのため、次のような文字で代用している。

* 乗算は *
* 除算は /
* 余算は %

(演習) Konoha を電卓かわりに使って計算してみよう

::
	
  >>>
  1+2*3
  
式 1+2*3を評価すると、評価値は7になる。この結果をみると、プログラミング言語でも、数式のルールにしたがい、 *演算子は+演算子よりも優先的に評価されていることがわかる。もし、加算を先に評価したいときは、(1+2)*3 のように優先する式を()で囲む。

プログラミング言語を学ぶ上で重要な特徴であるが、プログラミング言語は可能な限り数式などよく知られた記法を使い、逆にできるだけ「新しいことを覚えなくてよい」ように配慮されて設計されている。そういうわけで、まずは直感を働かせて意味を考えてみることが大切だ。多くの場合は、想像した通りの意味をもっており驚くことだろう。

変数
====

変数は、代数学において数値を抽象化して議論するために発明された道具である。 プログラミング言語は、「変数」を保持して参照する便利な道具として使っている。 

次は、変数 x に 数値1を保持するため、割り当てる式である。

::
	
  x = 1

変数 x に値を割り当てることを「代入」という。 変数は式である。変数を評価して、値を取り出すことを特に「参照」と呼ぶ。 (課題) x の値を参照してみよう

::
	
  >>> 
  x
  <<<
  1

通常、変数に改めて代入すると、変数の保持する値は再度割り当てられる。 次のように123を代入すると、x の値は123に変更される。

::
	
	>>>
	x = 123
	x
	<<<
	123


正しくない式
================

プログラミングで一番困るのは、「式」を評価したとき、予想する結果が得られないときである。

正しくない式

例えば、次のような式を入力してみよう。

::
	
 >>>
 1 # 1
 (<stdio>:1) [error] syntax error
 1 # 1
    ^

シンタックスエラー(syntax error) と表示されるはずである。syntax error とは、構文エラーのことで、文法レベルでプログラムが正しくないことを意味している。つまり、1 # 1 は、文法レベルで正しくない式であり、プログラミング言語が全く解釈できないことになる。

シンタックスエラーは、文法を正しく覚えることで回避することができる。もし発生しても些細なエラーである。一方、文法は正しいけど正しくない式がある。

例えば、変数 n を突然、入力してみよう。

::
	
 >>>
 n
 (<stdio>:2) [error] undefined name: n
  n

未定義の名前(undefined name) がエラーで報告される。変数は式であるため、nは式としては間違っていない。しかし、プログラミング言語の決まりごとを守っていないエラーということになる。さて、この決まりごとについては次回の型で学ぶことにする。

文法と再帰的構造
================

プログラミング言語は、C, Java, JavaScript, Python など様々な言語存在する。これらの言語は、よく似ているところも多いが文法が異なる。正しく使うためには、文法を正確に覚える必要がある。（ただし、ほとんどの言語がC言語をお手本に設計してあるため、基本的な部分は同じである。これは、C言語がよく普及していたため、後発言語はC言語をお手本に設計したわけである。）

更に、文法自体にも、全てのプログラミング言語に共通する法則がある。それは文法は再帰的に定義されているという点である。

今まで習った式を思い出してみよう。式 は、いずれかのどれかである。

* 数値
* 変数
* ＜式＞ + ＜式＞
* ＜式＞ * ＜式＞
* (＜式＞)
* 変数 = <式>

このように、式の定義自身に式が含まれる構造を再帰的構造と呼ぶ。 再帰構造を用いることで組み合わせが自由になり、式を組み合わせてより複雑な式を 表現することができるようになる利点がある。

ちょっと確認してみよう。次は、式であろうか？

::
	
	x = y = 1


変数 = <式>は、式である。したがって、y = 1 は式となる。更に、y = 1 が式であれば、x = y = 1 は式となる。つまり、x = (y = 1) となる。

プログラミング言語の文法定義に関しては、あとからもう少し詳しく説明したいと思う。興味のある学生は、バッカスナウア記法(BNF)をしらべてみるとよい。

手続き
===========

最後に、プログラミングが数学と異なる重要な違いを理解してみよう。

まず、次の式をみてみよう。

::
	
  x = x + 1
  

* もし数学的に解釈するのなら、x = x + 1 という式は矛盾しており、成り立たない。
* もちろん、プログラミング言語では、正しい式である。「変数xに x+1を評価した値を代入する」と解釈される。

この両者の解釈の違いが数学とプログラミングの違いを端的に示している。プログラミングは、「手続き」を記述するものである。

もし x= x+1 をみて、気持ち悪いなと感じたらその気持ちを大切にして欲しい。より先進的な関数型プログラミングを学ぶとき、役立つはずだ。一方、何も気持ち悪さを感じなかったら、数学のことは忘れてプログラミングをどんどん書いて行こう。

